// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: /Users/barathraghavan/code/murmur/murmur/buck-out/gen/proto-repo/compile_protobufs__srcs/ServerMessage.proto
package org.denovogroup.murmur.objects;


import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import okio.ByteString;

/**
 * Data sent by the "server" in a PSI exchange.
 */
public final class ServerMessage extends Message {

  public static final List<ByteString> DEFAULT_DOUBLEBLINDEDFRIENDS = Collections.emptyList();
  public static final List<ByteString> DEFAULT_HASHEDBLINDEDFRIENDS = Collections.emptyList();
    private static final String DBLIND = "dblind";
    private static final String DHASH = "dhash";

  /**
   * Double blinded friends of the client.
   */
  public final List<ByteString> doubleBlindedFriends;

  /**
   * Hashed blinded friends of the server.
   */
  public final List<ByteString> hashedBlindedFriends;

  public ServerMessage(ArrayList<ByteString> doubleBlindedFriends, ArrayList<ByteString> hashedBlindedFriends) {
    this.doubleBlindedFriends = doubleBlindedFriends != null ? (List<ByteString>) doubleBlindedFriends.clone() : DEFAULT_DOUBLEBLINDEDFRIENDS;
    this.hashedBlindedFriends = hashedBlindedFriends != null ? (List<ByteString>) hashedBlindedFriends.clone() : DEFAULT_HASHEDBLINDEDFRIENDS;
  }

    public JSONObject toJson(){
        JSONObject json = new JSONObject();
        JSONArray dBlinded = new JSONArray();
        JSONArray dHashed = new JSONArray();

        for(ByteString dblind : doubleBlindedFriends){
            dBlinded.put(dblind.base64());
        }
        for(ByteString hashed : hashedBlindedFriends){
            dHashed.put(hashed.base64());
        }

        try {
            json.put(DBLIND, dBlinded);
            json.put(DHASH, dHashed);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        return json;
    }

    public static ServerMessage fromJSON(JSONObject json){
        List<ByteString> doubleBlindedFriends = new ArrayList<>();
        List<ByteString> hashedBlindedFriends = new ArrayList<>();

        try {
            JSONArray dblinded = json.getJSONArray(DBLIND);
            JSONArray dhashed = json.getJSONArray(DHASH);

            for(int i=0; i<dblinded.length();i++){
                doubleBlindedFriends.add(ByteString.decodeBase64((String) dblinded.get(i)));
            }
            for(int i=0; i<dhashed.length();i++){
                hashedBlindedFriends.add(ByteString.decodeBase64((String) dhashed.get(i)));
            }
            return new ServerMessage((ArrayList<ByteString>) doubleBlindedFriends, (ArrayList<ByteString>) hashedBlindedFriends);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return null;
    }
}

